#! /usr/bin/env bash

: <<=cut
=pod

=head1  NAME

aeq - Perform standard queries on the Aggie Experts Server

=head1 SYNOPSIS

aeq [-ep=<data endpoint>] [-qp=<query endpoint>] \
      [-A --http.accept=<HTTP Accept| default application/ld+json>] \
      [-S --http.session=<httpie session|default aeq>] \
      [-p|--print] [-h|--help] <command> [<args>]

  where <command> is one of C<prefix> C<query>

aeq is as script that simplifies access to standard queries into the ucdavis
research profile system. aeq is a set of bash functions to communicate with the
services.  aeq uses a few other tools to perform the functions. L</"COMMANDS">
is summary of the commands that are available.

=head1 GLOBAL OPTIONS

=over 4

=item B<-S|--session|--http_session=I<http_session>>

Set the HTTPIE session variable. This allows you to maintain multiple
authentication setups for your aeq, so that you can go back and forth between
users. This is equivalent to the L<httpie|https://httpie.org/> session variable,
and are shared with that command. Sessions primarily keep the basic
authentication parameters saved.  By default the B<aeq> session is used.

=item B<--http_print>

Adjust httpie I<--print=> argument.  By default only the response body
I<--print=b> is shown.

=item B<-h|--help>

Shows the manpage for the program. The help pages are embedded in the script and
require the functions, C<pod2usage> and C<pod2text> to work properly.

=item B<-n|--no-default-prefix>

This flag means that no defined C<aeq> prefixes will be included in the
queries. This may be used for testing, but most likely would break almost all
commands in the C<aeq> setup.

=item B<--prefix=I<pre:URL>>

Specify query prefixes directly on the command-line.  These can be used if you
are testing new queries with C<aeq> for example.

=back

=cut

function _parse_yaml() {
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*'
  local fs
  fs=$(echo @|tr @ '\034')
  sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
      -e "s|^\\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  "$1" |
    awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("G[%s%s]=\"%s\"\n", vn, $2, $3);
      }
   }'
}

function main.init() {
  local opts;
    if ! opts=$(${G[shell_getopt]} -o A:bnhS:v --long prefix:,no-default-prefix,verbose,http_session:,session:,help -n 'aeq' -- "$@"); then
    echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    local defaults=1
    declare -A p;
    declare -A CMD;
    while true; do
	    case $1 in
        -A | --api) CMD[api]=$2; shift 2;;
	      --session | --http_session) CMD[http_session]=$2;  shift 2;;
	      -v | --verbose) CMD[verbose]=1;  shift;;
        -p | --prefix )
          p[${2%%:*}]=${2#*:};
          shift 2;;
	      --print | --http_print) CMD[http_print]=$2; shift 2;;
	      --endpoint | --ep ) CMD[endpoint]=$2; shift 2;;
        -n | --no-default-prefix ) defaults=; shift;;
        -h | --help ) exec pod2text "$0";;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done

    local config
    # Read the configuration file(s)
    for config in ${G[aeq_home]}/config/aeq.yml \
                  ${G[home]}/.config/aeq/aeq.yml ./.aeq.yml; do
      if [[ -f $config ]]; then
        eval "$(_parse_yaml "$config")"
      fi
    done

    # system variables (AEQ_FOO_BAR) over config file
    for i in "${!G[@]}"; do
      eval v=\$AEQ_${i^^}
      [[ -n $v ]] && G[$i]=$v
    done

    # command line over config and over system var
    for i in "${!CMD[@]}"; do
      [[ -n ${CMD[$i]} ]] && G[$i]=${CMD[$i]};
    done

  # Now, set the command prefixes
  if [[ -n $defaults ]]; then
    for k in "${!G[@]}"; do
      if [[ $k =~ ^prefix_ ]]; then
        G[cmd_prefix_${k#prefix_}]="${G[$k]}"
      fi
    done
  fi
  # Overlay new ones
  for k in "${!p[@]}"; do
    G[cmd_prefix_${k}]="${p[$k]}"
  done
}

: <<='cut'
=pod

=head1 COMMANDS

There are a number of aeq commands.

There are some informational commands that may or may not access the server.

C<aeq [global_options] prefix> will list the standard prefixes used by the
system.  These can up added to or updated with the C<--prefix> global command.

C<aeq [--qp=file:] list --options> will list the available queries or frames
for the system.  The data source may either be a file url, or a fuseki query endpoint.

Next there are a set of commands that communicate with the CDL service. Note,
that aeq uses L<httpie|https://httpie.org/> for its http communcation. This
allows users to combine aeq with other httpie requests if required. Login
infomation is stored using the standard C<httpie> methodology, see L</"GLOBAL
OPTIONS"> for httpid options.

C<aeq query --endpoint=I<url> --format=I<format>> Will read a query from
C<stdin> and output the results.  If the endpoint is a file, will use C<arq> to
peform the query, otherwise will assume we have a sqarql endpoint.  See
L</"QUERY"> for more information.

C<aeq [options] get [--array] [--csv=list] ark(s)> retrieves ARKs from the aeq
server. Can output in multiple formats.  See L</"GET"> for more information.

C<aeq [--session=http_session] login --auth=user[:password] > Allows users to
set and save their login parameters for further updates. See L</"LOGIN"> for more information.

=cut

function main.cmd () {
    cmd=$1
    shift;
    case $cmd in
      query )
        $cmd "$@";
        ;;
	    login | get | post | push | array_to_anvl ) # http requests
	      $cmd "$@";
	      ;;
      config ) # informational requests
        declare -p G
        ;;
	    prefix | parse_url | bind_array | log | err) # utility functions
	      $cmd "$@";
	      ;;
	    *)
	      exec pod2usage "$0"
	  ;;
    esac
}

function log() {
  echo -e >&2 LOG: "${@:-$(</dev/stdin)}"
}

function err() {
  local n=1;
  if [[ $1 = '--quiet' ]] ; then
    n=$2;
  else
    n=$1
    shift
    (>&2 echo err: "$@")
  fi
  exit "$n";
}

: <<=cut
=head2 PREFIX

aeq parse_url I<query_point>

C<aeq parse_url> returns a bash array of the passed parsed URL.  This really
just a diagnostic test to verify any urls are being read by C<aeq> correctly.
If not I<url> is passed, uses the C<aeq> endpoint as a test.

=cut

function parse_url() {
  declare -A url

  url[endpoint]=$1
  [[ -n ${url[endpoint]} ]] || url[endpoint]="${G[endpoint]}"

  local pattern='^(([[:alnum:]]+):)(//((([[:alnum:]]+)(:([[:alnum:]]+))?@)?([^:^@^/^.]+)(:([[:digit:]]+))?)?)?/(\.)?(.*)?$'

  if [[ "${url[endpoint]}" =~ $pattern ]]; then
    #      declare -p BASH_REMATCH
    url[is]="url"
    url[proto]=${BASH_REMATCH[2]}
    url[user]=${BASH_REMATCH[6]}
    url[password]=${BASH_REMATCH[8]}
    url[hostname]=${BASH_REMATCH[9]}
    url[port]=${BASH_REMATCH[11]}
    if [[ -n ${url[port]} ]]; then
      url[host]="${BASH_REMATCH[9]}:${BASH_REMATCH[11]}"
    else
      url[host]=${url[hostname]}
    fi
    if [[ -n ${BASH_REMATCH[12]} ]] ; then
      url[path]="${BASH_REMATCH[12]}${BASH_REMATCH[13]}"
    else
      url[path]="/${BASH_REMATCH[13]}"
    fi
  else
    url[proto]="file";
    url[path]=${PWD}/${url[endpoint]}
  fi

  declare -p url
}

: <<=cut
=head2 PREFIX

aeq --prefix=pre:url -n|--no-default-prefix prefix

C<aeq prefix> outputs the standard prefixes used in the aeq queries.  These
are specified in the defaults; through the configuration yaml files, or
specified on the command line via the global C<--prefix> command.

=cut

function prefix() {
  for k in "${!G[@]}"; do
    if [[ $k =~ ^cmd_prefix_ ]]; then
      echo "PREFIX ${k#cmd_prefix_}: <${G[$k]}>"
    fi
  done | sort -u
}

: <<='cut'
=head2 QUERY

aeq query --endpoint=url --format=output

C<aeq query> reads a linked data query from C<stdin> and performs that query,
outputing that to C<stdout>.

  # This example converts a simple ANVL file to a bash array
  $ echo -e "select ?s ?p ?o WHERE { ?s ?p ?o.} LIMIT 5" | ./aeq query --endpoint=file:/.foo.ttl --format=text/csv

The query function is used internally to perform all linked data queries.  If the endpoint is a

=head3 QUERY OPTIONS

=over 4

=item B<-p|--endpoint=C<url>>

Specify the endpoint to query.  If the endpoint is a C<file:> protocol, then the
application uses the C<arq> program.  If the endpoint is a C<url:> then the
query will ue use C<httpie>.


=item B<--format=I<csv|json|jsonld|ttl|bash|>>

Specify the desired output format.

These are the mime-type and include:
C<text/csv>, C<application/ld+json>, C<text/turtle>, C<text/nquads>.  Note that
not all formats work on all types, eg C<text/csv> will fail on C<construct> style queries.  The default is C<application/ld+json>

The C<bash> format deserves a bit more description.  If selected, each line in
the return will match a bash array description that can be used for further
bash-script processing.  Use the bash C<read> function to process these, eg.

  function testR () { "$1"; echo ${R[s]};}
  ans="$(./aeq query --endpoint=queries.ttl --query=$'select ?s ?p ?o\nwhere{ ?s aeq:query ?o} limit 3' --format=bash)"
  while IFS= read -r line; do testR "$line"; done <<<$ans

=back

=cut

function query() {
  local opts
  declare -A mime=(
    [csv]='text/csv'
    [jsonld]='application/ld+json'
    [ttl]='text/turtle'
    [json]='application/json'
    [nquads]='text/nquads'
    [bash]='application/json'
  );

  opts=$(${G[shell_getopt]} \
                -o f:e:pq:b: \
                --long print,format:,endpoint:,query:,bind: \
                -n 'aeq query' -- "$@") || err 1

  eval set -- "$opts"

  local query=
  local format="ttl"
  local endpoint="${G[endpoint]}";
  local print_only=;
  local inp
  #  declare -A bind;
  local bind=();

  while true; do
	  case $1 in
      -f | --format ) format="$2"; shift 2;;
      -e | --endpoint ) endpoint="$2"; shift 2;;
      -p | --print-only ) print_only=1; shift ;;
      -q | --query ) query="$2"; shift 2;;
      -b | --bind )  bind+=("$2"); shift 2;;
#      -b | --bind )  bind[${2%%:*}]=${2#*:}; shift 2;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  [[ -z ${mime[$format]} ]] && err 1 "Invalid format $format.  Must be one of <${!mime[*]}>"

  [[ "$query" == "-" ]] && query=$(</dev/stdin)

  query="$(prefix)"$'\n'"$query"

    # fix Binds
#  for i in "${!bind[@]}"; do
  for i in "${bind[@]}"; do
    local X='|'
    log BIND "$i"
#    query=$(sed -e "s${X}WHERE *{${X}WHERE {bind($bind_in as \?$i)${X}i" <<<"$query")
    query=$(sed -e "s${X}WHERE *{${X}WHERE { bind${i} ${X}i" <<<"$query")
  done

  if [[ -z $endpoint || -n $print_only ]]; then
    echo "$query";
    exit 0;
  fi;

  local ep
  inp=$(parse_url "$endpoint")
  eval "declare -A ep=${inp#*=}"
  if [[ "${ep[proto]}" == 'file' ]]; then
    if [[ "$format" == "bash" ]]; then
      arq --results="json" --query=- --data="${ep[path]}" <<<"$query" |
        jq -r '.head.vars as $head | .results.bindings[] | to_entries| "declare -A R=("+(map("["+.key+"]=$'"'"'"+(.value.value|gsub("(?<e>[$`\"'"'"'])";"\\"+(.e)))+"'"'"'") | join(" "))+")"|gsub("\n";"\\n")'
    else
      arq --results="$format" --query=- --data="${ep[path]}" <<<"$query"
    fi
  else
    if [[ "$format" == "bash" ]]; then
      http --print=b --form "${ep[endpoint]}" Accept:"${mime[$format]}" query="$query" |
        jq -r '.head.vars as $head | .results.bindings[] | to_entries| "declare -A R=("+(map("["+.key+"]=$'"'"'"+(.value.value|gsub("(?<e>[$`\"'"'"'])";"\\"+(.e)))+"'"'"'") | join(" "))+")"|gsub("\n";"\\n")'
    else
      http --print=b --form "${ep[endpoint]}" Accept:"${mime[$format]}" query="$query"
    fi
  fi
}


function _http () {
  local stdinp=
  local http="http --check-status --ssl=${G[http_ssl]} --session=${G[http_session]} --print=${G[http_print]}"
  if [[ $1 == '-n' || -n ${G[noop]} ]]; then
    [[ $1 == '-n' ]] && shift
    if [[ ! -t 0 ]]; then
      IFS='' read -r -d '' stdinp;
      log "$http $@ <<<$(printf "%q" "$stdinp")"
    else
      log "$http $@"
    fi
  else
    if [[ ! -t 0 ]]; then
      IFS='' read -r -d '' stdinp;
      $http $@  <<<"$stdinp"
    else
      $http $@
    fi
  fi
}

: <<=cut
=pod


=head1 AUTHOR

Quinn Hart <qjhart@ucdavis.edu>

=cut


#MAIN
# global Variables
declare -A G=(
  [http_ssl]="tls1.2"
  [http_print]="b"
  [http_session]="aeq"
  [util_http]="http"
  [util_jq]="jq"
  [prefix_bibo]="http://purl.org/ontology/bibo/"
  [prefix_bind]="http://experts.ucdavis.edu/schema/bind/"
  [prefix_foaf]="http://xmlns.com/foaf/0.1/"
  [prefix_obo]="http://purl.obolibrary.org/obo/"
  [prefix_purl]="http://purl.org/ontology/bibo/"
  [prefix_query]="http://experts.ucdavis.edu/schema/queries/"
  [prefix_rdf]="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  [prefix_rdfs]="http://www.w3.org/2000/01/rdf-schema#"
  [prefix_skos]="http://www.w3.org/2004/02/skos/core#"
  [prefix_aeq]="http://experts.library.ucdavis.edu/individual/"
  [prefix_vcard]="http://www.w3.org/2006/vcard/ns#"
  [prefix_vivo]="http://vivoweb.org/ontology/core#"
  [prefix_xsd]="http://www.w3.org/2001/XMLSchema#"
  [prefix_aeq]="http://experts.ucdavis.edu/queries/schema#"
  [prefix_q]="http://experts.ucdavis.edu/queries/"
  [home]="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../lib/aeq" >/dev/null 2>&1 && pwd )"
);


OPTS=();
# This command runs until the first '-'prefixed parameter.
while true; do
	case $1 in
	  -*) OPTS+=($1); shift ;;
	  -- ) shift; break;;
	  *) break;
	esac
done

# Allow getopt to be somewhere else
G[shell_getopt]=${FLAGS_GETOPT_CMD:-getopt}

#log "${OPTS[@]}"
main.init "${OPTS[@]}"
main.cmd "$@"

exit 0;
